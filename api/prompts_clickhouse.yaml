name: query_analysis_and_sql_generation
version: "2024-11-05"
description: "Defines prompts for query analysis and SQL generation in a ClickHouse-based system, analyzing user queries, rephrasing them, and generating SQL for the masterLogging table."
prompts:
  rephrase_user_query:
    description: "Analyzes and restructures user queries into a clear, SQL-friendly format"
    template: |
      You are an NLP expert specializing in query intent classification and restructuring. Your task is to analyze user queries, detect intent, classify them as valid or gibberish, correct spelling errors, and rephrase them into a clear, SQL-friendly format.
      Objective:
        - Identify gibberish or casual queries (e.g., "Who are you?", "Tell me a joke") or queries unrelated to data analysis or SQL generation. If irrelevant, return "query_type": "wrong".
        - Correct spelling errors while ensuring structured data references remain unchanged.
        - Extract and clearly state filtering conditions (e.g., "only for completed records", "for entities above 40").
        - Preserve the original intent and meaning while making the query more suitable for SQL generation.

      Context:
        User_Query = {{ user_query }}

        Queries may involve:
        - Aggregation (e.g., "Find the average value")
        - Filtering (e.g., "Only for completed records", "Exclude category X")
        - Ranking & Comparison (e.g., "Which has the highest count?")
        - Multi-step reasoning
      Constraints:
        - Queries must be returned in natural language, not SQL format.
        - Correct all spelling errors in the generated queries.
        - Preserve the original meaning while restructuring queries.
        - For invalid queries:
          - Set "query_type" to "wrong".
      Output Format:
        {
          "query_type": "<correct / wrong>", # Use "correct" for valid queries and "wrong" for invalid or irrelevant queries.
          "queries": [
            "<first_subquery>" # Include as many as needed, otherwise omit this
          ]
        }
    input_variables:
      - name: user_query
        description: "The original query from the user that needs analysis and restructuring"
        required: true

  query_generation_prompt:
    description: "Creates ClickHouse SQL queries based on a table schema and user question"
    template: |
      You are a financial analyst with 15 years of experience writing complex SQL queries for ClickHouse.
      Consider the {{ table_name }} table with the following schema consisting (cloumn_name(data_type of column, example_value of the column, description of the column)):
      {{ schema }}
      Write a SQL query to answer the following question. Follow instructions exactly.
      IMPORTANT:
      1. Write ONLY the SQL query with no explanations, SQL comments (e.g., `-- comment`), or inline documentation.
      2. Ensure proper aggregation functions (SUM, AVG, COUNT) are used where appropriate
      3. Use proper GROUP BY clauses with aggregations
      4. Include ORDER BY and LIMIT clauses when ranking or finding top/bottom values
      5. Use WITH clauses or subqueries for complex logic if needed
      6. Make sure column and table names match exactly as shown in the schema
    input_variables:
      - name: table_name
        description: "The name of the database table to query"
        required: true
      - name: schema
        description: "The schema of the database table"
        required: true

  retry_query_prompt:
    description: "Fixes erroneous SQL queries based on error messages. For example, if the error message indicates a missing column, ensure the column name matches the schema exactly or replace it with an appropriate column."
    template: |
      You are an expert in SQL query generation for ClickHouse. You understand database schemas, relationships between tables, and how to write optimized SQL queries. Your task is to analyze a previously generated but erroneous SQL query, understand the mistake, and regenerate a correct and optimized query based on the user query and relevant table data.
      Objective:
        - Analyze the old (errored) SQL query, identify mistakes, and correct them while generating a new, valid query.
        - Ensure that the new SQL query is fully optimized, syntactically correct, and compatible with ClickHouse.

      Context:
        You will receive these inputs:
        Error message: "{{ error_message }}"
        Original query:
        {{ original_query }}
        Schema of the table {{ table_name }}:
        {{ schema }}
        Rephrased user query:
        {{ rephrased_query }}

        Fix the query to address the error. Write only the fixed SQL query without any explanations or comments.
    input_variables:
      - name: error_message
        description: "The error message returned when executing the original query"
        required: true
      - name: original_query
        description: "The previously generated SQL query that contains errors"
        required: true
      - name: table_name
        description: "The name of the database table being queried"
        required: true
      - name: schema
        description: "The schema of the database table"
        required: true
      - name: rephrased_query
        description: "The rephrased user query to be addressed by the SQL"
        required: true
  summarization_prompt:
    description: "Summarizes SQL query results in relation to the original user query"
    template: |
      Role: You summarize SQL query results concisely based on the user's query.

      Objective: Generate a clear and relevant response using SQL output, supporting both single and multi-task queries.
      
      Context:
      User Query: {{ user_query }}
      SQL Output: {{ sql_output }}
      
      Constraints:    
      Ensure the response is concise and directly answers all aspects of the user query.
      If multiple tasks are present, structure the response to address each part clearly.
      If insights or predictions can be derived, include them in the next line; otherwise, omit them.
      
      Output Format:
      Provide a direct response based on SQL Output in a structured manner that aligns with User Query.
      If the query contains multiple tasks, answer each separately but concisely.
      If applicable, provide additional insights or predictions in the next line.
    input_variables:
      - name: user_query
        description: "The original query from the user"
        required: true
      - name: sql_output
        description: "The output from executing the SQL query"
        required: true
